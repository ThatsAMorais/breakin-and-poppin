#####	   File : SettingsManager.py
####	 Author : Alex Morais
### Description : 
##

import os

# Base Class
class SettingsManager():
    """
    a singleton manager that serves as an easily accessible repo
    for all of the engine's settings (i.e. game res, media directories)
    """

    class __impl:
	"""
	the actual settings manager implementation
	"""

	def __init__(self, args):
	    self.resolution = (800x600)
	    self.fullscreen = False
	    self.home_dir = os.getcwd()
	    self.media_home = os.path.join( os.getcwd(), 'media' )
	    self.font_dir = os.path.join( self.media_home, 'font' )
		
	def loadFont(self, fontName):

	    # if the font hasn't already been loaded
	    if not fontName in self.fonts:
		# make the font and store a ref in this mgr
		font = Font(fontName)
		self.fonts[fontName] = font
	    else:
		print 'font already loaded; no problem'
		
	    # return the font (ready or not)
	    return self.fonts[fontName]
	
    # storage for the instance reference
    __instance = None
    
    def __init__(self):
        """ Create singleton instance """
        # Check whether we already have an instance
        if Singleton.__instance is None:
            # Create and remember instance
            Singleton.__instance = Singleton.__impl()

        # Store instance reference as the only member in the handle
        self.__dict__['_Singleton__instance'] = Singleton.__instance

    def __getattr__(self, attr):
        """ Delegate access to implementation """
        return getattr(self.__instance, attr)

    def __setattr__(self, attr, value):
        """ Delegate access to implementation """
        return setattr(self.__instance, attr, value)



