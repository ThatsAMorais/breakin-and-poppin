#####	   File : Screen.py
####	 Author : Alex Morais
### Description : 
###		 
##

from OpenGL.GLUT import *
from OpenGL.GL import *

class Screen:
    """
    The screen is responsible for blitting textures with OpenGL.  Anything\
 to be rendered to the screen must have a texture ID made by the screen.\
 A state, for example, would request that an image be rendered by calling\
 blitThis and passing the texID returned by MakeTexture.  In other words, \
 the screen is also the texture manager.  No need for abstraction at the time.
    """

    def __init__( self, size=(1,1) ):
	"""
	Que? ... Eeneet?  Si, esta el eeneet.
	"""

	self.size = size
	self.center = (size[0]*0.5, size[1]*0.5)
	self.scrObjs = []   # objects to be blitted to the screen
	self.textures = []  # texture ids
	self.sizeOf = {}    # { textureID : size, ... }

    def setSize( self, size=(1,1) ):
	"""
	Sets the size of the screen
	"""
	self.size = size
	self.center = (size[0]*0.5, size[1]*0.5)

    def _IntToFloatCoords_(self, intX, intY ):
	"""
	Converts the two integer coordinates to their floating point
	"""
	floatX = (intX - self.half[0]) / self.half[0]
	floatY = (intY - self.half[1]) / self.half[1] #* -1
	
	return (FltX,FltY)

    def destroyTexture( self, id ):
	if id in self.textures:
	    glDeleteTextures( 1, (id) )
	    self.textures.remove(id)
	    del self.sizeOf[id]

    def makeTexture( self, image, size ):
	"""
	generates a texture for 'image', stores it, returns it
	"""
	#
	try:
	    # get image meta-data (dimensions) and data
	    width, height, sprite = size[0], size[1], image.tostring("raw", "RGBA", 0, -1)
	except SystemError:
	    # has no alpha channel, synthesize one, see the
	    # texture module for more realistic handling
	    #width, height, sprite = im.size[0], im.size[1], im.tostring("raw", "RGB", 0, -1)
	    width, height, sprite = size[0], size[1], image.tostring()#("raw", "RGB", 0, -1)
	    return None

	#id = GLuint()
	# Generate one texture ID
	id = glGenTextures(1)
	#print repr(sprite)
	glBindTexture( GL_TEXTURE_2D, id )
	#glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
	
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE) 
	# Texture params(must have)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)

	try:
	    # Write the 32-bit RGBA texture buffer to video memory
	    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA
		    #glTexImage2D( GL_TEXTURE_RECTANGLE_NV, 0, GL_RGBA
		    , width, height, 0, GL_RGBA
		    , GL_UNSIGNED_BYTE, sprite )
	except OpenGL.error.GLError:
	    print 'fuckin gl error!'
	    return None

	self.textures.append( id )
	self.sizeOf[id] = size
	return id   # the texture id required to render objs on this screen

    def blitThis( self, object ):
	"""
	Adds an object to the screen's list of items to draw to the screen
	"""
	self.scrObjs.append( object )
	

    def _blit_(self, id, (x,y), (width,height)):
	# convert the coords to a percentage of the screen
	originCrd = IntegerToFloatCoords(x, y)
	extentCrd = IntegerToFloatCoords(x+width, y+height)

	# Setup OpenGL to render this texture
	#glColor3f( 1.0, 1.0, 0.0 )
	glEnable(GL_TEXTURE_2D)
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE)
	# Bind to begin with texture number 'id'
	glBindTexture (GL_TEXTURE_2D, id)
	#*#
	glBegin( GL_QUADS )
	# BL
	#; glVertex2i( x, y+height )
	glTexCoord2f( 0, 1.0 ); glVertex2f( originCrd[0], extentCrd[1] )
	# BR
	#; glVertex2i( x+width, y+height )
	glTexCoord2f( 1.0, 1.0 ); glVertex2f( extentCrd[0], extentCrd[1] )
	# TL
	#; glVertex2i( x+width, y )
	glTexCoord2f( 1.0, 0 ); glVertex2f( extentCrd[0], originCrd[1] )
	# TR
	#; glVertex2i( x, y )
	glTexCoord2f( 0, 0.0 ); glVertex2f( originCrd[0], originCrd[1] )
	glEnd()
	#*#


    def draw( self ):
	"""
	The true, internal blitting function that blits the blitList
	"""
	# loop over the screen objects,
	#   rendering each in the order they were added.
	for object in self.scrObjs:
	    # get the texture id
	    id = object.getTexture( self )
	    # make sure the object gave us one
	    if id and id in self.textures:
		# blit the texture
		self._blit_( id, object.pos, self.sizeOf[id] )
	    else:
		print 'Screen:Warning:Invalid textureID in draw', id

	# clear the list
	self.scrObjs = []


